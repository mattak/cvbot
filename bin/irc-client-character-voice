#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'irc/client/character/voice'
require 'uri'
require 'open-uri'
require 'json'
require 'cinch'

class String
  def is_json?
    begin
      !!JSON.parse(self)
    rescue
      return false
    end
  end
end

class IRCEncoder
  def initialize(enable_jis=true)
    @enable_jis = enable_jis
  end

  def decode(word)
    if @enable_jis
      return word.force_encoding('ISO-2022-JP').encode('UTF-8')
    end
    return word
  end

  def encode(word)
    if @enable_jis
      return `echo #{word} | nkf -j`.chomp
    end
    return word
  end
end

class CvBot
  include Cinch::Plugin
  MAX_DISPLAY = 10

  set :required_options, [:apihost, :encoder]

  match /cv (.+)/, group: :blegh, method: :handle_message, react_on: :channel

  def getlist(apihost, word)
    puts `echo #{ word } | nkf --guess`
    debug word
    word_escape = URI.escape(word)

    if apihost == nil
      return []
    end

    url = "#{ apihost }/search/actor/#{ word_escape }.json"

    begin
      json_str = open(url) do |f|
        charset = f.charset
        f.read
      end
    rescue
      log "request failed : #{ url }"
      return []
    end

    puts json_str
    return [] if !json_str.is_json?

    json = JSON.parse(json_str)
    return [] if json.size < 1

    result_list = []
    actor = json[0]
    actor['programs'].each_with_index do |program, index|
      character = actor['characters'][index]
      result_list.push("#{ program['title'] } / #{ character['name'] }")
    end

    return result_list
  end

  def handle_message(m, arg)
    encoder = config[:encoder]
    apihost = config[:apihost]
    word    = encoder.decode(arg)
    word.chomp!
    word.gsub!(/\s+/, '')
    target  = m.target

    list = getlist(apihost, word)
    if list != nil && list.size > 0
      list.take(MAX_DISPLAY).each do |description|
        target.notice encoder.encode(description)
      end
      if list.size > MAX_DISPLAY
        target.notice "... #{list.size} characters"
      end
    end
  end
end

#
# Main
#

filepath = (ARGV.size > 0) ? ARGV[0] : 'config/config.json'

if !File.exist?(filepath)
  puts "please write your config : config/config.json"
  exit 1
end

content = File.open(filepath).read
json = JSON.parse(content)
options = {}

options[:server]   = json['server']
options[:port]     = json['port'] || 6667
options[:channels] = json['channels']
options[:apihost]  = json['apihost']
options[:nick]     = json['nick'] || 'cv-bot'
options[:charset]  = json['charset'] || 'ISO-2022-JP'
options[:jis]      = (options[:charset] == 'ISO-2022-JP')

encoder = IRCEncoder.new(options[:jis])

bot = Cinch::Bot.new do
  configure do |c|
    c.server   = options[:server]
    c.channels = options[:channels]
    c.port     = options[:port]
    c.nick     = options[:nick]
    c.plugins.plugins  = [CvBot]
    c.plugins.options[CvBot] = {encoder: encoder, apihost: options[:apihost]}
  end
end

bot.start
